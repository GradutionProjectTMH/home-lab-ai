/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace HomeLab {
  export type ProjectStruct = {
    status: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    paymentToken: PromiseOrValue<string>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
    serviceFeePercent: PromiseOrValue<BigNumberish>;
    lastPhaseId: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    data: PromiseOrValue<string>;
  };

  export type ProjectStructOutput = [
    number,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    status: number;
    owner: string;
    paymentToken: string;
    createdAt: BigNumber;
    updatedAt: BigNumber;
    serviceFeePercent: BigNumber;
    lastPhaseId: BigNumber;
    name: string;
    data: string;
  };

  export type PhaseStruct = {
    status: PromiseOrValue<BigNumberish>;
    client: PromiseOrValue<string>;
    bounty: PromiseOrValue<BigNumberish>;
    expiredAt: PromiseOrValue<BigNumberish>;
    rejectTimes: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<string>;
  };

  export type PhaseStructOutput = [
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    status: number;
    client: string;
    bounty: BigNumber;
    expiredAt: BigNumber;
    rejectTimes: BigNumber;
    data: string;
  };
}

export interface HomeLabInterface extends utils.Interface {
  functions: {
    "acceptedPhase(uint256,uint256)": FunctionFragment;
    "cancelPhase(uint256,uint256)": FunctionFragment;
    "finishPhase(uint256,uint256)": FunctionFragment;
    "getPendingWithdraw(address)": FunctionFragment;
    "getPhase(uint256,uint256)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "lastProjectId()": FunctionFragment;
    "owner()": FunctionFragment;
    "permittedTokens(address)": FunctionFragment;
    "projects(uint256)": FunctionFragment;
    "rejectSubmitedPhase(uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "serviceFeePercent()": FunctionFragment;
    "setPermittedToken(address,bool)": FunctionFragment;
    "setServiceFeePercent(uint256)": FunctionFragment;
    "startPhase(uint256,address,uint256,uint256)": FunctionFragment;
    "startProject(string,string,address,address,uint256,uint256)": FunctionFragment;
    "submitPhase(uint256,uint256,string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(address,address)": FunctionFragment;
    "withdrawExpiredPhase(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptedPhase"
      | "cancelPhase"
      | "finishPhase"
      | "getPendingWithdraw"
      | "getPhase"
      | "initialize"
      | "lastProjectId"
      | "owner"
      | "permittedTokens"
      | "projects"
      | "rejectSubmitedPhase"
      | "renounceOwnership"
      | "serviceFeePercent"
      | "setPermittedToken"
      | "setServiceFeePercent"
      | "startPhase"
      | "startProject"
      | "submitPhase"
      | "transferOwnership"
      | "withdraw"
      | "withdrawExpiredPhase"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptedPhase",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPhase",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "finishPhase",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingWithdraw",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPhase",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastProjectId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permittedTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "projects",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectSubmitedPhase",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "serviceFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPermittedToken",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setServiceFeePercent",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "startPhase",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "startProject",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitPhase",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawExpiredPhase",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptedPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPhase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastProjectId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permittedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rejectSubmitedPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serviceFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermittedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setServiceFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startPhase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawExpiredPhase",
    data: BytesLike
  ): Result;

  events: {
    "AcceptedPhase(uint256,tuple,uint256,tuple)": EventFragment;
    "CanceledPhase(uint256,tuple,uint256,tuple)": EventFragment;
    "FinishedPhase(uint256,tuple,uint256,tuple)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RejectedSubmitedPhase(uint256,tuple,uint256,tuple)": EventFragment;
    "SetPermittedToken(address,bool)": EventFragment;
    "SetServiceFeePercent(uint256,uint256)": EventFragment;
    "StartedPhase(uint256,tuple,uint256,tuple)": EventFragment;
    "StartedProject(uint256,tuple,uint256,tuple)": EventFragment;
    "SubmittedPhase(uint256,tuple,uint256,tuple)": EventFragment;
    "Withdrawn(address,address,uint256)": EventFragment;
    "WithdrawnExpiredPhase(uint256,tuple,uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AcceptedPhase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CanceledPhase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinishedPhase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RejectedSubmitedPhase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPermittedToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetServiceFeePercent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartedPhase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartedProject"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmittedPhase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnExpiredPhase"): EventFragment;
}

export interface AcceptedPhaseEventObject {
  projectId: BigNumber;
  project: HomeLab.ProjectStructOutput;
  phaseId: BigNumber;
  phase: HomeLab.PhaseStructOutput;
}
export type AcceptedPhaseEvent = TypedEvent<
  [
    BigNumber,
    HomeLab.ProjectStructOutput,
    BigNumber,
    HomeLab.PhaseStructOutput
  ],
  AcceptedPhaseEventObject
>;

export type AcceptedPhaseEventFilter = TypedEventFilter<AcceptedPhaseEvent>;

export interface CanceledPhaseEventObject {
  projectId: BigNumber;
  project: HomeLab.ProjectStructOutput;
  phaseId: BigNumber;
  phase: HomeLab.PhaseStructOutput;
}
export type CanceledPhaseEvent = TypedEvent<
  [
    BigNumber,
    HomeLab.ProjectStructOutput,
    BigNumber,
    HomeLab.PhaseStructOutput
  ],
  CanceledPhaseEventObject
>;

export type CanceledPhaseEventFilter = TypedEventFilter<CanceledPhaseEvent>;

export interface FinishedPhaseEventObject {
  projectId: BigNumber;
  project: HomeLab.ProjectStructOutput;
  phaseId: BigNumber;
  phase: HomeLab.PhaseStructOutput;
}
export type FinishedPhaseEvent = TypedEvent<
  [
    BigNumber,
    HomeLab.ProjectStructOutput,
    BigNumber,
    HomeLab.PhaseStructOutput
  ],
  FinishedPhaseEventObject
>;

export type FinishedPhaseEventFilter = TypedEventFilter<FinishedPhaseEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RejectedSubmitedPhaseEventObject {
  projectId: BigNumber;
  project: HomeLab.ProjectStructOutput;
  phaseId: BigNumber;
  phase: HomeLab.PhaseStructOutput;
}
export type RejectedSubmitedPhaseEvent = TypedEvent<
  [
    BigNumber,
    HomeLab.ProjectStructOutput,
    BigNumber,
    HomeLab.PhaseStructOutput
  ],
  RejectedSubmitedPhaseEventObject
>;

export type RejectedSubmitedPhaseEventFilter =
  TypedEventFilter<RejectedSubmitedPhaseEvent>;

export interface SetPermittedTokenEventObject {
  token: string;
  isPermitted: boolean;
}
export type SetPermittedTokenEvent = TypedEvent<
  [string, boolean],
  SetPermittedTokenEventObject
>;

export type SetPermittedTokenEventFilter =
  TypedEventFilter<SetPermittedTokenEvent>;

export interface SetServiceFeePercentEventObject {
  oldServiceFeePercent: BigNumber;
  newServiceFeePercent: BigNumber;
}
export type SetServiceFeePercentEvent = TypedEvent<
  [BigNumber, BigNumber],
  SetServiceFeePercentEventObject
>;

export type SetServiceFeePercentEventFilter =
  TypedEventFilter<SetServiceFeePercentEvent>;

export interface StartedPhaseEventObject {
  projectId: BigNumber;
  project: HomeLab.ProjectStructOutput;
  phaseId: BigNumber;
  phase: HomeLab.PhaseStructOutput;
}
export type StartedPhaseEvent = TypedEvent<
  [
    BigNumber,
    HomeLab.ProjectStructOutput,
    BigNumber,
    HomeLab.PhaseStructOutput
  ],
  StartedPhaseEventObject
>;

export type StartedPhaseEventFilter = TypedEventFilter<StartedPhaseEvent>;

export interface StartedProjectEventObject {
  projectId: BigNumber;
  project: HomeLab.ProjectStructOutput;
  phaseId: BigNumber;
  phase: HomeLab.PhaseStructOutput;
}
export type StartedProjectEvent = TypedEvent<
  [
    BigNumber,
    HomeLab.ProjectStructOutput,
    BigNumber,
    HomeLab.PhaseStructOutput
  ],
  StartedProjectEventObject
>;

export type StartedProjectEventFilter = TypedEventFilter<StartedProjectEvent>;

export interface SubmittedPhaseEventObject {
  projectId: BigNumber;
  project: HomeLab.ProjectStructOutput;
  phaseId: BigNumber;
  phase: HomeLab.PhaseStructOutput;
}
export type SubmittedPhaseEvent = TypedEvent<
  [
    BigNumber,
    HomeLab.ProjectStructOutput,
    BigNumber,
    HomeLab.PhaseStructOutput
  ],
  SubmittedPhaseEventObject
>;

export type SubmittedPhaseEventFilter = TypedEventFilter<SubmittedPhaseEvent>;

export interface WithdrawnEventObject {
  paymentToken: string;
  receiver: string;
  amount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface WithdrawnExpiredPhaseEventObject {
  projectId: BigNumber;
  project: HomeLab.ProjectStructOutput;
  phaseId: BigNumber;
  phase: HomeLab.PhaseStructOutput;
}
export type WithdrawnExpiredPhaseEvent = TypedEvent<
  [
    BigNumber,
    HomeLab.ProjectStructOutput,
    BigNumber,
    HomeLab.PhaseStructOutput
  ],
  WithdrawnExpiredPhaseEventObject
>;

export type WithdrawnExpiredPhaseEventFilter =
  TypedEventFilter<WithdrawnExpiredPhaseEvent>;

export interface HomeLab extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HomeLabInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptedPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finishPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPendingWithdraw(
      _paymentToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[HomeLab.PhaseStructOutput]>;

    initialize(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lastProjectId(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    permittedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    projects(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        status: number;
        owner: string;
        paymentToken: string;
        createdAt: BigNumber;
        updatedAt: BigNumber;
        serviceFeePercent: BigNumber;
        lastPhaseId: BigNumber;
        name: string;
        data: string;
      }
    >;

    rejectSubmitedPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    serviceFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    setPermittedToken(
      _token: PromiseOrValue<string>,
      _isPermitted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setServiceFeePercent(
      _newServiceFeePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _client: PromiseOrValue<string>,
      _expiredAt: PromiseOrValue<BigNumberish>,
      _bounty: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startProject(
      _name: PromiseOrValue<string>,
      _data: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _phase1Client: PromiseOrValue<string>,
      _phase1ExpiredAt: PromiseOrValue<BigNumberish>,
      _phase1Bounty: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _paymentToken: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawExpiredPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptedPhase(
    _projectId: PromiseOrValue<BigNumberish>,
    _phaseId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelPhase(
    _projectId: PromiseOrValue<BigNumberish>,
    _phaseId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finishPhase(
    _projectId: PromiseOrValue<BigNumberish>,
    _phaseId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPendingWithdraw(
    _paymentToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPhase(
    _projectId: PromiseOrValue<BigNumberish>,
    _phaseId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<HomeLab.PhaseStructOutput>;

  initialize(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lastProjectId(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  permittedTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  projects(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string
    ] & {
      status: number;
      owner: string;
      paymentToken: string;
      createdAt: BigNumber;
      updatedAt: BigNumber;
      serviceFeePercent: BigNumber;
      lastPhaseId: BigNumber;
      name: string;
      data: string;
    }
  >;

  rejectSubmitedPhase(
    _projectId: PromiseOrValue<BigNumberish>,
    _phaseId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  serviceFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  setPermittedToken(
    _token: PromiseOrValue<string>,
    _isPermitted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setServiceFeePercent(
    _newServiceFeePercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startPhase(
    _projectId: PromiseOrValue<BigNumberish>,
    _client: PromiseOrValue<string>,
    _expiredAt: PromiseOrValue<BigNumberish>,
    _bounty: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startProject(
    _name: PromiseOrValue<string>,
    _data: PromiseOrValue<string>,
    _paymentToken: PromiseOrValue<string>,
    _phase1Client: PromiseOrValue<string>,
    _phase1ExpiredAt: PromiseOrValue<BigNumberish>,
    _phase1Bounty: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitPhase(
    _projectId: PromiseOrValue<BigNumberish>,
    _phaseId: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _paymentToken: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawExpiredPhase(
    _projectId: PromiseOrValue<BigNumberish>,
    _phaseId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptedPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    finishPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getPendingWithdraw(
      _paymentToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<HomeLab.PhaseStructOutput>;

    initialize(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    lastProjectId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    permittedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    projects(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        status: number;
        owner: string;
        paymentToken: string;
        createdAt: BigNumber;
        updatedAt: BigNumber;
        serviceFeePercent: BigNumber;
        lastPhaseId: BigNumber;
        name: string;
        data: string;
      }
    >;

    rejectSubmitedPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    serviceFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    setPermittedToken(
      _token: PromiseOrValue<string>,
      _isPermitted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setServiceFeePercent(
      _newServiceFeePercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _client: PromiseOrValue<string>,
      _expiredAt: PromiseOrValue<BigNumberish>,
      _bounty: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startProject(
      _name: PromiseOrValue<string>,
      _data: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _phase1Client: PromiseOrValue<string>,
      _phase1ExpiredAt: PromiseOrValue<BigNumberish>,
      _phase1Bounty: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _paymentToken: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawExpiredPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AcceptedPhase(uint256,tuple,uint256,tuple)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      project?: null,
      phaseId?: PromiseOrValue<BigNumberish> | null,
      phase?: null
    ): AcceptedPhaseEventFilter;
    AcceptedPhase(
      projectId?: PromiseOrValue<BigNumberish> | null,
      project?: null,
      phaseId?: PromiseOrValue<BigNumberish> | null,
      phase?: null
    ): AcceptedPhaseEventFilter;

    "CanceledPhase(uint256,tuple,uint256,tuple)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      project?: null,
      phaseId?: PromiseOrValue<BigNumberish> | null,
      phase?: null
    ): CanceledPhaseEventFilter;
    CanceledPhase(
      projectId?: PromiseOrValue<BigNumberish> | null,
      project?: null,
      phaseId?: PromiseOrValue<BigNumberish> | null,
      phase?: null
    ): CanceledPhaseEventFilter;

    "FinishedPhase(uint256,tuple,uint256,tuple)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      project?: null,
      phaseId?: PromiseOrValue<BigNumberish> | null,
      phase?: null
    ): FinishedPhaseEventFilter;
    FinishedPhase(
      projectId?: PromiseOrValue<BigNumberish> | null,
      project?: null,
      phaseId?: PromiseOrValue<BigNumberish> | null,
      phase?: null
    ): FinishedPhaseEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RejectedSubmitedPhase(uint256,tuple,uint256,tuple)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      project?: null,
      phaseId?: PromiseOrValue<BigNumberish> | null,
      phase?: null
    ): RejectedSubmitedPhaseEventFilter;
    RejectedSubmitedPhase(
      projectId?: PromiseOrValue<BigNumberish> | null,
      project?: null,
      phaseId?: PromiseOrValue<BigNumberish> | null,
      phase?: null
    ): RejectedSubmitedPhaseEventFilter;

    "SetPermittedToken(address,bool)"(
      token?: PromiseOrValue<string> | null,
      isPermitted?: PromiseOrValue<boolean> | null
    ): SetPermittedTokenEventFilter;
    SetPermittedToken(
      token?: PromiseOrValue<string> | null,
      isPermitted?: PromiseOrValue<boolean> | null
    ): SetPermittedTokenEventFilter;

    "SetServiceFeePercent(uint256,uint256)"(
      oldServiceFeePercent?: PromiseOrValue<BigNumberish> | null,
      newServiceFeePercent?: PromiseOrValue<BigNumberish> | null
    ): SetServiceFeePercentEventFilter;
    SetServiceFeePercent(
      oldServiceFeePercent?: PromiseOrValue<BigNumberish> | null,
      newServiceFeePercent?: PromiseOrValue<BigNumberish> | null
    ): SetServiceFeePercentEventFilter;

    "StartedPhase(uint256,tuple,uint256,tuple)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      project?: null,
      phaseId?: PromiseOrValue<BigNumberish> | null,
      phase?: null
    ): StartedPhaseEventFilter;
    StartedPhase(
      projectId?: PromiseOrValue<BigNumberish> | null,
      project?: null,
      phaseId?: PromiseOrValue<BigNumberish> | null,
      phase?: null
    ): StartedPhaseEventFilter;

    "StartedProject(uint256,tuple,uint256,tuple)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      project?: null,
      phaseId?: PromiseOrValue<BigNumberish> | null,
      phase?: null
    ): StartedProjectEventFilter;
    StartedProject(
      projectId?: PromiseOrValue<BigNumberish> | null,
      project?: null,
      phaseId?: PromiseOrValue<BigNumberish> | null,
      phase?: null
    ): StartedProjectEventFilter;

    "SubmittedPhase(uint256,tuple,uint256,tuple)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      project?: null,
      phaseId?: PromiseOrValue<BigNumberish> | null,
      phase?: null
    ): SubmittedPhaseEventFilter;
    SubmittedPhase(
      projectId?: PromiseOrValue<BigNumberish> | null,
      project?: null,
      phaseId?: PromiseOrValue<BigNumberish> | null,
      phase?: null
    ): SubmittedPhaseEventFilter;

    "Withdrawn(address,address,uint256)"(
      paymentToken?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      paymentToken?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawnEventFilter;

    "WithdrawnExpiredPhase(uint256,tuple,uint256,tuple)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      project?: null,
      phaseId?: PromiseOrValue<BigNumberish> | null,
      phase?: null
    ): WithdrawnExpiredPhaseEventFilter;
    WithdrawnExpiredPhase(
      projectId?: PromiseOrValue<BigNumberish> | null,
      project?: null,
      phaseId?: PromiseOrValue<BigNumberish> | null,
      phase?: null
    ): WithdrawnExpiredPhaseEventFilter;
  };

  estimateGas: {
    acceptedPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finishPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPendingWithdraw(
      _paymentToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lastProjectId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    permittedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projects(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rejectSubmitedPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    serviceFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    setPermittedToken(
      _token: PromiseOrValue<string>,
      _isPermitted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setServiceFeePercent(
      _newServiceFeePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _client: PromiseOrValue<string>,
      _expiredAt: PromiseOrValue<BigNumberish>,
      _bounty: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startProject(
      _name: PromiseOrValue<string>,
      _data: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _phase1Client: PromiseOrValue<string>,
      _phase1ExpiredAt: PromiseOrValue<BigNumberish>,
      _phase1Bounty: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _paymentToken: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawExpiredPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptedPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finishPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPendingWithdraw(
      _paymentToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lastProjectId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permittedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projects(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rejectSubmitedPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    serviceFeePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPermittedToken(
      _token: PromiseOrValue<string>,
      _isPermitted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setServiceFeePercent(
      _newServiceFeePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _client: PromiseOrValue<string>,
      _expiredAt: PromiseOrValue<BigNumberish>,
      _bounty: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startProject(
      _name: PromiseOrValue<string>,
      _data: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _phase1Client: PromiseOrValue<string>,
      _phase1ExpiredAt: PromiseOrValue<BigNumberish>,
      _phase1Bounty: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _paymentToken: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawExpiredPhase(
      _projectId: PromiseOrValue<BigNumberish>,
      _phaseId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
