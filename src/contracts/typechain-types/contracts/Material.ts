/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Material {
  export type VerifierStruct = {
    name: PromiseOrValue<string>;
    data: PromiseOrValue<string>;
    isActive: PromiseOrValue<boolean>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
  };

  export type VerifierStructOutput = [
    string,
    string,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    name: string;
    data: string;
    isActive: boolean;
    createdAt: BigNumber;
    updatedAt: BigNumber;
  };

  export type ItemStruct = {
    name: PromiseOrValue<string>;
    data: PromiseOrValue<string>;
    owner: PromiseOrValue<string>;
    paymentToken: PromiseOrValue<string>;
    bounty: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
    verifyBy: PromiseOrValue<string>;
    verifiedAt: PromiseOrValue<BigNumberish>;
  };

  export type ItemStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    name: string;
    data: string;
    owner: string;
    paymentToken: string;
    bounty: BigNumber;
    createdAt: BigNumber;
    updatedAt: BigNumber;
    verifyBy: string;
    verifiedAt: BigNumber;
  };
}

export interface MaterialInterface extends utils.Interface {
  functions: {
    "addVerifier(address,string,string)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "items(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "permittedTokens(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestItem(string,string,address,uint256)": FunctionFragment;
    "setActiveVerifier(address,bool)": FunctionFragment;
    "setPermittedToken(address,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateItem(uint256,string,string)": FunctionFragment;
    "updateVerifier(address,string,string)": FunctionFragment;
    "verifiers(address)": FunctionFragment;
    "verifyItem(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addVerifier"
      | "initialize"
      | "items"
      | "owner"
      | "permittedTokens"
      | "renounceOwnership"
      | "requestItem"
      | "setActiveVerifier"
      | "setPermittedToken"
      | "transferOwnership"
      | "updateItem"
      | "updateVerifier"
      | "verifiers"
      | "verifyItem"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addVerifier",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "items",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permittedTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestItem",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setActiveVerifier",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermittedToken",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateItem",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVerifier",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyItem",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "items", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permittedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setActiveVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermittedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifiers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifyItem", data: BytesLike): Result;

  events: {
    "AddedVerifier(address,tuple)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RequestedItem(uint256,tuple)": EventFragment;
    "SetActiveVerifier(address,tuple)": EventFragment;
    "SetPermittedToken(address,bool)": EventFragment;
    "UpdatedItem(uint256,tuple)": EventFragment;
    "UpdatedVerifier(address,tuple)": EventFragment;
    "VerifiedItem(uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedVerifier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestedItem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetActiveVerifier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPermittedToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedItem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedVerifier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VerifiedItem"): EventFragment;
}

export interface AddedVerifierEventObject {
  verifierAddress: string;
  verifier: Material.VerifierStructOutput;
}
export type AddedVerifierEvent = TypedEvent<
  [string, Material.VerifierStructOutput],
  AddedVerifierEventObject
>;

export type AddedVerifierEventFilter = TypedEventFilter<AddedVerifierEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RequestedItemEventObject {
  itemId: BigNumber;
  item: Material.ItemStructOutput;
}
export type RequestedItemEvent = TypedEvent<
  [BigNumber, Material.ItemStructOutput],
  RequestedItemEventObject
>;

export type RequestedItemEventFilter = TypedEventFilter<RequestedItemEvent>;

export interface SetActiveVerifierEventObject {
  verifierAddress: string;
  verifier: Material.VerifierStructOutput;
}
export type SetActiveVerifierEvent = TypedEvent<
  [string, Material.VerifierStructOutput],
  SetActiveVerifierEventObject
>;

export type SetActiveVerifierEventFilter =
  TypedEventFilter<SetActiveVerifierEvent>;

export interface SetPermittedTokenEventObject {
  token: string;
  isPermitted: boolean;
}
export type SetPermittedTokenEvent = TypedEvent<
  [string, boolean],
  SetPermittedTokenEventObject
>;

export type SetPermittedTokenEventFilter =
  TypedEventFilter<SetPermittedTokenEvent>;

export interface UpdatedItemEventObject {
  itemId: BigNumber;
  item: Material.ItemStructOutput;
}
export type UpdatedItemEvent = TypedEvent<
  [BigNumber, Material.ItemStructOutput],
  UpdatedItemEventObject
>;

export type UpdatedItemEventFilter = TypedEventFilter<UpdatedItemEvent>;

export interface UpdatedVerifierEventObject {
  verifierAddress: string;
  verifier: Material.VerifierStructOutput;
}
export type UpdatedVerifierEvent = TypedEvent<
  [string, Material.VerifierStructOutput],
  UpdatedVerifierEventObject
>;

export type UpdatedVerifierEventFilter = TypedEventFilter<UpdatedVerifierEvent>;

export interface VerifiedItemEventObject {
  itemId: BigNumber;
  item: Material.ItemStructOutput;
}
export type VerifiedItemEvent = TypedEvent<
  [BigNumber, Material.ItemStructOutput],
  VerifiedItemEventObject
>;

export type VerifiedItemEventFilter = TypedEventFilter<VerifiedItemEvent>;

export interface Material extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MaterialInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addVerifier(
      _address: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber
      ] & {
        name: string;
        data: string;
        owner: string;
        paymentToken: string;
        bounty: BigNumber;
        createdAt: BigNumber;
        updatedAt: BigNumber;
        verifyBy: string;
        verifiedAt: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    permittedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestItem(
      _name: PromiseOrValue<string>,
      _data: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _bounty: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setActiveVerifier(
      _address: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPermittedToken(
      _token: PromiseOrValue<string>,
      _isPermitted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateItem(
      _itemId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateVerifier(
      _address: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean, BigNumber, BigNumber] & {
        name: string;
        data: string;
        isActive: boolean;
        createdAt: BigNumber;
        updatedAt: BigNumber;
      }
    >;

    verifyItem(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addVerifier(
    _address: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _data: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  items(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber
    ] & {
      name: string;
      data: string;
      owner: string;
      paymentToken: string;
      bounty: BigNumber;
      createdAt: BigNumber;
      updatedAt: BigNumber;
      verifyBy: string;
      verifiedAt: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  permittedTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestItem(
    _name: PromiseOrValue<string>,
    _data: PromiseOrValue<string>,
    _paymentToken: PromiseOrValue<string>,
    _bounty: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setActiveVerifier(
    _address: PromiseOrValue<string>,
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPermittedToken(
    _token: PromiseOrValue<string>,
    _isPermitted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateItem(
    _itemId: PromiseOrValue<BigNumberish>,
    _name: PromiseOrValue<string>,
    _data: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateVerifier(
    _address: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _data: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifiers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean, BigNumber, BigNumber] & {
      name: string;
      data: string;
      isActive: boolean;
      createdAt: BigNumber;
      updatedAt: BigNumber;
    }
  >;

  verifyItem(
    _itemId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addVerifier(
      _address: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _data: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber
      ] & {
        name: string;
        data: string;
        owner: string;
        paymentToken: string;
        bounty: BigNumber;
        createdAt: BigNumber;
        updatedAt: BigNumber;
        verifyBy: string;
        verifiedAt: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    permittedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestItem(
      _name: PromiseOrValue<string>,
      _data: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _bounty: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setActiveVerifier(
      _address: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPermittedToken(
      _token: PromiseOrValue<string>,
      _isPermitted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateItem(
      _itemId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _data: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVerifier(
      _address: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _data: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean, BigNumber, BigNumber] & {
        name: string;
        data: string;
        isActive: boolean;
        createdAt: BigNumber;
        updatedAt: BigNumber;
      }
    >;

    verifyItem(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddedVerifier(address,tuple)"(
      verifierAddress?: PromiseOrValue<string> | null,
      verifier?: null
    ): AddedVerifierEventFilter;
    AddedVerifier(
      verifierAddress?: PromiseOrValue<string> | null,
      verifier?: null
    ): AddedVerifierEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RequestedItem(uint256,tuple)"(
      itemId?: PromiseOrValue<BigNumberish> | null,
      item?: null
    ): RequestedItemEventFilter;
    RequestedItem(
      itemId?: PromiseOrValue<BigNumberish> | null,
      item?: null
    ): RequestedItemEventFilter;

    "SetActiveVerifier(address,tuple)"(
      verifierAddress?: PromiseOrValue<string> | null,
      verifier?: null
    ): SetActiveVerifierEventFilter;
    SetActiveVerifier(
      verifierAddress?: PromiseOrValue<string> | null,
      verifier?: null
    ): SetActiveVerifierEventFilter;

    "SetPermittedToken(address,bool)"(
      token?: PromiseOrValue<string> | null,
      isPermitted?: PromiseOrValue<boolean> | null
    ): SetPermittedTokenEventFilter;
    SetPermittedToken(
      token?: PromiseOrValue<string> | null,
      isPermitted?: PromiseOrValue<boolean> | null
    ): SetPermittedTokenEventFilter;

    "UpdatedItem(uint256,tuple)"(
      itemId?: PromiseOrValue<BigNumberish> | null,
      item?: null
    ): UpdatedItemEventFilter;
    UpdatedItem(
      itemId?: PromiseOrValue<BigNumberish> | null,
      item?: null
    ): UpdatedItemEventFilter;

    "UpdatedVerifier(address,tuple)"(
      verifierAddress?: PromiseOrValue<string> | null,
      verifier?: null
    ): UpdatedVerifierEventFilter;
    UpdatedVerifier(
      verifierAddress?: PromiseOrValue<string> | null,
      verifier?: null
    ): UpdatedVerifierEventFilter;

    "VerifiedItem(uint256,tuple)"(
      itemId?: PromiseOrValue<BigNumberish> | null,
      item?: null
    ): VerifiedItemEventFilter;
    VerifiedItem(
      itemId?: PromiseOrValue<BigNumberish> | null,
      item?: null
    ): VerifiedItemEventFilter;
  };

  estimateGas: {
    addVerifier(
      _address: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    permittedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestItem(
      _name: PromiseOrValue<string>,
      _data: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _bounty: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setActiveVerifier(
      _address: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPermittedToken(
      _token: PromiseOrValue<string>,
      _isPermitted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateItem(
      _itemId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateVerifier(
      _address: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyItem(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addVerifier(
      _address: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    items(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permittedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestItem(
      _name: PromiseOrValue<string>,
      _data: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _bounty: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setActiveVerifier(
      _address: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPermittedToken(
      _token: PromiseOrValue<string>,
      _isPermitted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateItem(
      _itemId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateVerifier(
      _address: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyItem(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
